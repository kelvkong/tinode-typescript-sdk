export type Transport = 'ws' | 'wss' | 'lp';

/**
 * An abstraction for a websocket or a long polling connection.
 */
export class Connection {
    private host = '';
    private apiKey = '';
    private secure = false;
    private transport: Transport;
    private autoReconnect = false;

    /**
     * Settings for exponential backoff
     * 2000 milliseconds, minimum delay between reconnects
     */
    private _BOFF_BASE = 2000;
    /**
     * Settings for exponential backoff
     * Maximum delay between reconnects 2^10 * 2000 ~ 34 minutes
     */
    private _BOFF_MAX_ITER = 10;
    /**
     * Settings for exponential backoff
     * Add random delay
     */
    private _BOFF_JITTER = 0.3;

    private _BOFF_TIMER = null;
    private _BOFF_ITERATION = 0;
    /**
     *  Indicator if the socket was manually closed - don't autoReconnect if true.
     */
    private _BOFF_CLOSED = false;


    /**
     * @param host - Host name and port number to connect to.
     * @param apiKey - API key generated by keygen
     * @param transport - Network transport to use, either `ws`/`wss` for websocket or `lp` for long polling.
     * @param secure - Use secure WebSocket (wss) if true.
     * @param autoReconnect - If connection is lost, try to reconnect automatically.
     */
    constructor(host: string, apiKey: string, transport: Transport, secure: boolean, autoReconnect: boolean) {
        this.host = host;
        this.apiKey = apiKey;
        this.secure = secure;
        this.transport = transport;
        this.autoReconnect = autoReconnect;
    }
}
